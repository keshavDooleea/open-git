{"version":3,"file":"extension.js","mappings":"sGAAA,eACA,QAEA,YAGEA,cAFiB,KAAAC,YAAc,qCAG7BC,KAAKC,YACP,CAEQC,mBACN,IACE,MAAMC,QAAsB,EAAAC,QAAQC,WAAWL,KAAKD,aACpDC,KAAKM,SAASH,E,CACd,MAAOI,GACPC,QAAQC,IAAI,8BAA+BF,GAC3C,EAAAG,OAAOC,YAAY,+B,CAEvB,CAOQL,SAASH,GACf,OAAKA,EAKDA,EAAcS,WAAW,QACpBZ,KAAKa,UAAUV,QAIxBH,KAAKc,QAAQX,GATJ,EAAAO,OAAOC,YAAY,mCAU9B,CAEQE,UAAUV,GAChB,MAAMY,EAAMC,UAAUb,GAAec,OACrC,OAAO,EAAAP,OAAOQ,QAAQH,EACxB,CAEQD,QAAQX,GACd,IAAMA,EAAcgB,SAAS,OAAQhB,EAAcgB,SAAS,KAC1D,OAAO,EAAAT,OAAOC,YAAY,2BAG5B,MAAOS,EAAWC,GAAkBlB,EAAcmB,MAAM,KAElDP,EAAM,WADGK,EAAUE,MAAM,KAAK,MACHD,IAEjC,EAAAX,OAAOQ,QAAQH,EACjB,E,kFCtDF,eACA,QAEA,MAAaX,EAcHmB,6BACN,MAAMC,EAAW,EAAAC,OAAOC,kBAAkBC,SAASH,SACnD,OAAO,EAAAI,UAAUC,kBAAkBC,KAAKC,GAAWA,EAAOC,IAAIC,SAAQC,QAAQD,GAAWT,GAAUZ,WAAWqB,KAAS,EACzH,EAjBF,YACS,EAAA5B,WAAc8B,IACnB,MAAMC,EAAMhC,EAAQiC,sBAEpB,OAAO,IAAIC,SAAgB,CAACC,EAASC,MACnC,IAAAC,MAAKN,EAAS,CAAEC,QAAO,CAACM,EAA2BC,IAC7CD,EACKF,EAAOE,GAETH,EAAQI,IACf,GACF,C,gFCdN,eAEA,eACEpB,mBAAmBqB,GACjB,EAAAnB,OAAOoB,uBAAuBD,EAChC,CAEArB,qBAAqBR,GACnB,MACM6B,QADuC,EAAAE,IAAIC,aAAa,EAAAC,IAAIC,MAAMlC,IAChC,wBAA0B,6CAClEf,KAAKW,YAAYiC,EACnB,E,UCXFM,EAAOC,QAAUC,QAAQ,S,SCAzBF,EAAOC,QAAUC,QAAQ,gB,GCCrBC,EAA2B,CAAC,EAGhC,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqBE,IAAjBD,EACH,OAAOA,EAAaL,QAGrB,IAAID,EAASG,EAAyBE,GAAY,CAGjDJ,QAAS,CAAC,GAOX,OAHAO,EAAoBH,GAAUL,EAAQA,EAAOC,QAASG,GAG/CJ,EAAOC,OACf,C,uGCtBA,eACA,SAEA,oBAAyBQ,GACvB,IAAIC,EAAa,EAAAC,SAASC,gBAAgB,aAAa,KACrD,IAAI,EAAAC,GAAK,IAGXJ,EAAQK,cAAcC,KAAKL,EAC7B,EAEA,wBAA8B,C","sources":["webpack://opg/./src/git.ts","webpack://opg/./src/process.ts","webpack://opg/./src/vs-code.ts","webpack://opg/external commonjs \"vscode\"","webpack://opg/external node-commonjs \"child_process\"","webpack://opg/webpack/bootstrap","webpack://opg/./src/extension.ts"],"sourcesContent":["import { Process } from \"./process\";\r\nimport { VsCode } from \"./vs-code\";\r\n\r\nexport class Git {\r\n  private readonly GIT_COMMAND = \"git config --get remote.origin.url\";\r\n\r\n  constructor() {\r\n    this.initGitURL();\r\n  }\r\n\r\n  private async initGitURL(): Promise<void> {\r\n    try {\r\n      const repositoryURL = await Process.runCommand(this.GIT_COMMAND);\r\n      this.parseURL(repositoryURL);\r\n    } catch (error) {\r\n      console.log(\"Error while running command\", error);\r\n      VsCode.showMessage(\"No directory with Git found!\");\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 2 Github URL possibilities: https://docs.github.com/en/get-started/getting-started-with-git/about-remote-repositories\r\n   *  - HTTPS: https://github.com/user/repo.git\r\n   *  - SSH  : git@github.com:user/repo.git\r\n   */\r\n  private parseURL(repositoryURL: string): Promise<void> | void {\r\n    if (!repositoryURL) {\r\n      return VsCode.showMessage(\"Git remote repository not found!\");\r\n    }\r\n\r\n    // url is in https:// format\r\n    if (repositoryURL.startsWith(\"http\")) {\r\n      return this.openHTTPS(repositoryURL);\r\n    }\r\n\r\n    // url must now be in git@github.com:user/repo.git format\r\n    this.openSSH(repositoryURL);\r\n  }\r\n\r\n  private openHTTPS(repositoryURL: string): Promise<void> {\r\n    const url = decodeURI(repositoryURL).trim(); // remove URLs encodings\r\n    return VsCode.openURL(url);\r\n  }\r\n\r\n  private openSSH(repositoryURL: string): Promise<void> | void {\r\n    if (!(repositoryURL.includes(\"@\") && repositoryURL.includes(\":\"))) {\r\n      return VsCode.showMessage(\"Unknown Git repository!\");\r\n    }\r\n\r\n    const [gitDomain, repositoryName] = repositoryURL.split(\":\"); // [\"git@github.com\", \"user/repo.git\"]\r\n    const domain = gitDomain.split(\"@\")[1]; // [\"git\", \"github.com\"]\r\n    const url = `https://${domain}/${repositoryName}`;\r\n\r\n    VsCode.openURL(url);\r\n  }\r\n}\r\n","import { window, workspace } from \"vscode\";\r\nimport { ExecException, exec } from \"child_process\";\r\n\r\nexport class Process {\r\n  static runCommand = (command: string): Promise<string> => {\r\n    const cwd = Process.getWorkingDirectory();\r\n\r\n    return new Promise<string>((resolve, reject) => {\r\n      exec(command, { cwd }, (err: ExecException | null, output: string) => {\r\n        if (err) {\r\n          return reject(err);\r\n        }\r\n        return resolve(output);\r\n      });\r\n    });\r\n  };\r\n\r\n  private static getWorkingDirectory(): string | undefined {\r\n    const fileName = window.activeTextEditor?.document.fileName;\r\n    return workspace.workspaceFolders?.map((folder) => folder.uri.fsPath).filter((fsPath) => fileName?.startsWith(fsPath))[0];\r\n  }\r\n}\r\n","import { window, env, Uri } from \"vscode\";\r\n\r\nexport class VsCode {\r\n  static showMessage(message: string): void {\r\n    window.showInformationMessage(message);\r\n  }\r\n\r\n  static async openURL(url: string): Promise<void> {\r\n    const hasOpenedSuccessfully: boolean = await env.openExternal(Uri.parse(url));\r\n    const message = hasOpenedSuccessfully ? \"Opened Git repository\" : \"An error occurred while opening repository\";\r\n    this.showMessage(message);\r\n  }\r\n}\r\n","module.exports = require(\"vscode\");","module.exports = require(\"child_process\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import { ExtensionContext, commands } from \"vscode\";\nimport { Git } from \"./git\";\n\nexport function activate(context: ExtensionContext) {\n  let disposable = commands.registerCommand(\"opg.start\", () => {\n    new Git();\n  });\n\n  context.subscriptions.push(disposable);\n}\n\nexport function deactivate() {}\n"],"names":["constructor","GIT_COMMAND","this","initGitURL","async","repositoryURL","Process","runCommand","parseURL","error","console","log","VsCode","showMessage","startsWith","openHTTPS","openSSH","url","decodeURI","trim","openURL","includes","gitDomain","repositoryName","split","static","fileName","window","activeTextEditor","document","workspace","workspaceFolders","map","folder","uri","fsPath","filter","command","cwd","getWorkingDirectory","Promise","resolve","reject","exec","err","output","message","showInformationMessage","env","openExternal","Uri","parse","module","exports","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","context","disposable","commands","registerCommand","Git","subscriptions","push"],"sourceRoot":""}