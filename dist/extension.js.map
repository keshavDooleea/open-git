{"version":3,"file":"extension.js","mappings":"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","sources":["webpack://opg/./src/disposable.ts","webpack://opg/./src/git.ts","webpack://opg/./src/managers/abs-manager.ts","webpack://opg/./src/managers/directory-manager.ts","webpack://opg/./src/managers/file-manager.ts","webpack://opg/./src/managers/index.ts","webpack://opg/./src/managers/manager-handler.ts","webpack://opg/./src/process.ts","webpack://opg/./src/vs-code.ts","webpack://opg/external commonjs \"vscode\"","webpack://opg/external node-commonjs \"child_process\"","webpack://opg/external node-commonjs \"path\"","webpack://opg/webpack/bootstrap","webpack://opg/./src/extension.ts"],"sourcesContent":["import { commands, Disposable, ExtensionContext } from \"vscode\";\r\nimport { Manager, ManagerHandler } from \"./managers\";\r\nimport { Git } from \"./git\";\r\n\r\nexport class GitDisposable {\r\n  private disposables: Disposable[];\r\n  private git: Git;\r\n  private managerHandler: ManagerHandler;\r\n\r\n  constructor(private context: ExtensionContext) {\r\n    this.disposables = [];\r\n    this.git = new Git();\r\n    this.managerHandler = new ManagerHandler();\r\n  }\r\n\r\n  add(command: string, managerKey: Manager): void {\r\n    const cmd = commands.registerCommand(command, () => {\r\n      const manager = this.managerHandler.getManager(managerKey);\r\n      this.git.init(manager);\r\n    });\r\n\r\n    this.disposables.push(cmd);\r\n  }\r\n\r\n  subscribe(): void {\r\n    this.disposables.forEach((disposable) => this.context.subscriptions.push(disposable));\r\n  }\r\n}\r\n","import { AbsManager } from \"./managers\";\r\nimport { VsCode } from \"./vs-code\";\r\n\r\nexport class Git {\r\n  private manager!: AbsManager;\r\n\r\n  private setManager(manager: AbsManager): void {\r\n    this.manager = manager;\r\n  }\r\n\r\n  async init(manager: AbsManager): Promise<void> {\r\n    this.setManager(manager);\r\n    this.parseURL();\r\n  }\r\n\r\n  private async parseURL(): Promise<void> {\r\n    try {\r\n      const repositoryURL = await this.manager.runCommand();\r\n      this.openURL(repositoryURL);\r\n    } catch (err) {\r\n      const error = err as Error;\r\n      console.log(\"Error while running command\", error);\r\n      VsCode.showMessage(error.message);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 2 Github URL possibilities: https://docs.github.com/en/get-started/getting-started-with-git/about-remote-repositories\r\n   *  - HTTPS: https://github.com/user/repo.git\r\n   *  - SSH  : git@github.com:user/repo.git\r\n   */\r\n  private openURL(repositoryURL: string): Promise<void> | void {\r\n    if (!repositoryURL) {\r\n      return VsCode.showMessage(\"Git remote repository not found!\");\r\n    }\r\n\r\n    // url is in https:// format\r\n    if (repositoryURL.startsWith(\"http\")) {\r\n      return this.manager.openHTTPS(repositoryURL);\r\n    }\r\n\r\n    // url must now be in git@github.com:user/repo.git format\r\n    this.manager.openSSH(repositoryURL);\r\n  }\r\n}\r\n","import { Process } from \"../process\";\r\nimport { VsCode } from \"../vs-code\";\r\n\r\nexport abstract class AbsManager {\r\n  protected process: Process;\r\n\r\n  constructor() {\r\n    this.process = new Process();\r\n  }\r\n\r\n  runCommand(): Promise<string> {\r\n    return this.process.runCommand();\r\n  }\r\n\r\n  protected getBaseHttpsURL(repositoryURL: string): string {\r\n    const [url] = repositoryURL.split(\".git\"); // remove .git to remove extra default encodings at the end (%0A)\r\n    return url;\r\n  }\r\n\r\n  protected getBaseSshURL(repositoryURL: string): string {\r\n    if (!(repositoryURL.includes(\"@\") && repositoryURL.includes(\":\"))) {\r\n      throw new Error(\"Unknown Git repository!\");\r\n    }\r\n\r\n    const [gitDomain, repositoryName] = repositoryURL.split(\":\"); // [\"git@github.com\", \"user/repo.git\"]\r\n    const domain = gitDomain.split(\"@\")[1]; // [\"git\", \"github.com\"]\r\n    const url = `https://${domain}/${repositoryName}`;\r\n\r\n    return url;\r\n  }\r\n\r\n  protected openURL(url: string, message: string): void {\r\n    VsCode.openURL(url, message);\r\n  }\r\n\r\n  abstract openHTTPS(url: string): void;\r\n  abstract openSSH(url: string): void;\r\n}\r\n","import { VsCode } from \"../vs-code\";\r\nimport { AbsManager } from \"./abs-manager\";\r\n\r\nexport class DirectoryManager extends AbsManager {\r\n  private readonly message = \"Opened Git repository\";\r\n\r\n  openHTTPS(url: string): void {\r\n    const httpsURL = this.getBaseHttpsURL(url);\r\n    VsCode.openURL(httpsURL, this.message);\r\n  }\r\n\r\n  openSSH(url: string): void {\r\n    const sshURL = this.getBaseSshURL(url);\r\n    VsCode.openURL(sshURL, this.message);\r\n  }\r\n}\r\n","import { VsCode } from \"../vs-code\";\r\nimport { AbsManager } from \"./abs-manager\";\r\n\r\nexport class FileManager extends AbsManager {\r\n  openHTTPS(url: string): void {\r\n    const httpsURL = this.getBaseHttpsURL(url);\r\n    this.openFile(httpsURL);\r\n  }\r\n\r\n  openSSH(url: string): void {\r\n    const sshURL = this.getBaseSshURL(url);\r\n    this.openFile(sshURL);\r\n  }\r\n\r\n  private async getCurrentBranch(): Promise<string> {\r\n    const defaultBranch = \"master\";\r\n    // Todo: read current branch\r\n    return Promise.resolve(\"master\") || defaultBranch;\r\n  }\r\n\r\n  // 'test/a/b/c' returns 'c'\r\n  private getLastTextFromURL(url: string): string | undefined {\r\n    return url.split(\"/\").pop();\r\n  }\r\n\r\n  // concatonate working directory url with fileName\r\n  private async openFile(url: string): Promise<void> {\r\n    // extract repository name from Git url\r\n    const repositoryName = this.getLastTextFromURL(url);\r\n\r\n    // from the OS full path, extract only the path that follows the repository name\r\n    const openedFile = this.process.getFileName();\r\n\r\n    if (!openedFile || !repositoryName) {\r\n      return VsCode.showMessage(\"No file is currently opened!\");\r\n    }\r\n\r\n    // get folder/file path after repositoryName in path\r\n    const fileName = openedFile.split(repositoryName)[1];\r\n\r\n    if (!fileName) {\r\n      return VsCode.showMessage(\"Sorry, this file can't be opened!\");\r\n    }\r\n\r\n    // construct URL to file path\r\n    const branch = await this.getCurrentBranch();\r\n    let fileURL = `${url}/blob/${branch}${fileName}`;\r\n\r\n    // replace all backward slashes with forward ones\r\n    fileURL = fileURL.replace(/\\\\/g, \"/\");\r\n\r\n    const message = `Opened ${this.getLastTextFromURL(fileURL)}`;\r\n    VsCode.openURL(fileURL, message);\r\n  }\r\n}\r\n","import { AbsManager } from \"./abs-manager\";\r\nimport { ManagerHandler, Manager } from \"./manager-handler\";\r\nimport { DirectoryManager } from \"./directory-manager\";\r\nimport { FileManager } from \"./file-manager\";\r\n\r\nexport { AbsManager, ManagerHandler, Manager, DirectoryManager, FileManager };\r\n","import { AbsManager, DirectoryManager, FileManager } from \"./\";\r\n\r\nexport enum Manager {\r\n  DIRECTORY,\r\n  FILE,\r\n}\r\n\r\n// to prevent multiple new instantiations of managers\r\nexport class ManagerHandler {\r\n  private _directoryManager: DirectoryManager | undefined;\r\n  private _fileManager: FileManager | undefined;\r\n\r\n  get directoryManager(): DirectoryManager {\r\n    if (!this._directoryManager) {\r\n      this._directoryManager = new DirectoryManager();\r\n    }\r\n\r\n    return this._directoryManager;\r\n  }\r\n\r\n  get fileManager(): FileManager {\r\n    if (!this._fileManager) {\r\n      this._fileManager = new FileManager();\r\n    }\r\n\r\n    return this._fileManager;\r\n  }\r\n\r\n  getManager(key: Manager): AbsManager {\r\n    switch (key) {\r\n      case Manager.DIRECTORY:\r\n        return this.directoryManager;\r\n      case Manager.FILE:\r\n        return this.fileManager;\r\n    }\r\n  }\r\n}\r\n","import { window, workspace } from \"vscode\";\r\nimport { ExecException, exec } from \"child_process\";\r\nimport { dirname } from \"path\";\r\n\r\nexport class Process {\r\n  private readonly GIT_COMMAND = \"git config --get remote.origin.url\";\r\n\r\n  runCommand = (): Promise<string> => {\r\n    const cwd = this.getWorkingDirectory();\r\n\r\n    return new Promise<string>((resolve, reject) => {\r\n      exec(this.GIT_COMMAND, { cwd }, (err: ExecException | null, output: string) => {\r\n        if (err) {\r\n          return reject(new Error(\"No directory with Git found!\"));\r\n        }\r\n        return resolve(output);\r\n      });\r\n    });\r\n  };\r\n\r\n  private getWorkingDirectory(): string | undefined {\r\n    const fileName = this.getFileName();\r\n\r\n    // a file is opened, return its working directory\r\n    if (fileName) {\r\n      return dirname(fileName);\r\n    }\r\n\r\n    // no file is opened in the editor, so get opened workspace\r\n    const workSpace = workspace.workspaceFolders;\r\n\r\n    // empty sidebar, no workspace opened\r\n    if (!workSpace || workSpace.length === 0) {\r\n      throw new Error(\"No directory opened!\");\r\n    }\r\n\r\n    return workSpace[0].uri.fsPath;\r\n  }\r\n\r\n  getFileName(): string | undefined {\r\n    return window.activeTextEditor?.document.fileName;\r\n  }\r\n}\r\n","import { window, env, Uri } from \"vscode\";\r\n\r\nexport class VsCode {\r\n  static showMessage(message: string): void {\r\n    window.showInformationMessage(message);\r\n  }\r\n\r\n  static async openURL(url: string, successMessage: string): Promise<void> {\r\n    const hasOpenedSuccessfully: boolean = await env.openExternal(Uri.parse(url));\r\n    const message = hasOpenedSuccessfully ? successMessage : \"An error occurred while opening repository\";\r\n    this.showMessage(message);\r\n  }\r\n}\r\n","module.exports = require(\"vscode\");","module.exports = require(\"child_process\");","module.exports = require(\"path\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import { ExtensionContext } from \"vscode\";\r\nimport { GitDisposable } from \"./disposable\";\r\nimport { Manager } from \"./managers\";\r\n\r\nexport function activate(context: ExtensionContext) {\r\n  const disposable = new GitDisposable(context);\r\n\r\n  disposable.add(\"open-git-dir\", Manager.DIRECTORY);\r\n  disposable.add(\"open-git-file\", Manager.FILE);\r\n\r\n  disposable.subscribe();\r\n}\r\n\r\nexport function deactivate() {}\r\n"],"names":["constructor","context","this","disposables","git","Git","managerHandler","ManagerHandler","add","command","managerKey","cmd","commands","registerCommand","manager","getManager","init","push","subscribe","forEach","disposable","subscriptions","setManager","async","parseURL","repositoryURL","runCommand","openURL","err","error","console","log","VsCode","showMessage","message","startsWith","openHTTPS","openSSH","process","Process","getBaseHttpsURL","url","split","getBaseSshURL","includes","Error","gitDomain","repositoryName","DirectoryManager","AbsManager","httpsURL","sshURL","FileManager","openFile","Promise","resolve","getLastTextFromURL","pop","openedFile","getFileName","fileName","fileURL","getCurrentBranch","replace","Manager","directoryManager","_directoryManager","fileManager","_fileManager","key","DIRECTORY","FILE","GIT_COMMAND","cwd","getWorkingDirectory","reject","exec","output","dirname","workSpace","workspace","workspaceFolders","length","uri","fsPath","window","activeTextEditor","document","static","showInformationMessage","successMessage","env","openExternal","Uri","parse","module","exports","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","GitDisposable"],"sourceRoot":""}